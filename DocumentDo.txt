<button ng-click="documentDownloadCtrl.setShowDocumentDownload(rowData.documentId,rowData.documentName);"
		title="{{i18n('views-common-messages.views-myDocumentsTreeView-documentTree-downloadFile')}}" class="button-link tbl-tool-link"
		aid="{{autoIdPrefix}}-ShowDocDownload">
		<i class="pi pi-download pi-lg">
			<ng-transclude></ng-transclude>
		</i>
<div sd-dialog="documentDownloadCtrl.documentDownload" sda-modal="true"
		 sda-show="documentDownloadCtrl.showDoumentDownload"
		 sda-type="confirm"
		 sda-title="{{i18n('views-common-messages.views-myDocumentsTreeView-documentTree-downloadFile')}}"
		 sda-scope="this"
		 sda-template="plugins/html5-views-common/html5/scripts/directives/partials/documentDownloadDialog.html"
		 sda-on-confirm="documentDownloadCtrl.downloadDocument(res)"
		 sda-confirm-action-label="{{i18n('views-common-messages.views-genericRepositoryView-downloanFile-label')}}"
		 sda-cancel-action-label="{{i18n('views-common-messages.common-cancel')}}"
		 sda-width="300px"
		 sda-height="50px"
		 sda-aid-prefix="{{autoIdPrefix}}">
</div>

</button>


(function() {
	'use strict';

	angular.module('viewscommon-ui').directive('sdDocumentDownload', ['sdUtilService', DocumentDownload]);
	/*
	 *
	 */
	function DocumentDownload(sdUtilService) {

		return {
			restrict: 'EA',
			scope: { // Creates a new sub scope
				documentName: '=sdaDocumentName',
				documentId: '=sdaDocumentId',
				autoIdPrefix: '@sdaAidPrefix'
			},
			transclude: true,
			replace: true,
			templateUrl: sdUtilService.getBaseUrl() + 'plugins/html5-views-common/html5/scripts/directives/partials/documentDownload.html',
			link: function(scope, element, attrs, ctrl) {
				new DocumentDownloadLink(scope, element, attrs, ctrl);
			}
		};

		/**
		 *
		 */
		function DocumentDownloadLink(scope, element, attrs, ctrl) {

			var self = this;

			scope.documentDownloadCtrl = self;

			initialize();

			/*
			 *
			 */
			DocumentDownloadLink.prototype.safeApply = function() {
				sdUtilService.safeApply(scope);
			};

			function initialize() {
				// Make sure i18n is available in the current scope
				if (!angular.isDefined(scope.i18n)) {
					scope.i18n = scope.$parent.i18n;
				}

				self.setShowDocumentDownload = setShowDocumentDownload;
				self.downloadDocument = downloadDocument;
			}

			/**
			 *
			 */
			function downloadDocument(res) {
				var REST_BASE_URL = sdUtilService.getBaseUrl() + 'services/rest/portal/documents';
				window.location = REST_BASE_URL + '/downloadDocument' + '/'
						+ scope.documentId + '/' + scope.documentName;
			}


			/**
			 *
			 */
			function setShowDocumentDownload() {
				if (scope.documentId != undefined && scope.documentName != undefined) {
					self.showDoumentDownload = true;
				}
			}

		}
	}
})();
